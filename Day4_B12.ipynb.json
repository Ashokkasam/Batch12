{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Adding , Changing and removing from a list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Ashok', 'joyal', 'Feyez', 'Abcd']\n"
     ]
    }
   ],
   "source": [
    "my_emps = ['Ashok', 'joyal', 'Feyez', 'Abcd']\n",
    "print(my_emps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Ashok', 'joyal', 'Feyez', 'Abcd', 'Andrew']\n"
     ]
    }
   ],
   "source": [
    "# How to add elements\n",
    "my_emps.append('Andrew')\n",
    "print(my_emps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Ashok', 'Farhan', 'Feyez', 'Abcd', 'Andrew']\n"
     ]
    }
   ],
   "source": [
    "# you want  to add new emp @ Index 1\n",
    "my_emps[1]= 'Farhan'\n",
    "print(my_emps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Inserting the element in to list. 3 index ---> Vishal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Andrew', 'Vishal']\n"
     ]
    }
   ],
   "source": [
    "my_emps.insert(3,'Vishal')\n",
    "print(my_emps)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Andrew', 'Vishal']\n"
     ]
    }
   ],
   "source": [
    "# How to removew the elements from the list\n",
    "del my_emps[0]\n",
    "print(my_emps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Removing the elements by using the pop() Method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# It will be maintaining a carboncopy of the deleted items.\n",
    "# similar to recycle items ( Making extra copy)\n",
    "# the default nature, It will be deleting the elements from the end."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Vishal'"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_emps.pop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Ashok', 'Feyez', 'Abcd', 'Andrew']\n"
     ]
    }
   ],
   "source": [
    "print(my_emps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Ashok', 'Abcd', 'Andrew']\n"
     ]
    }
   ],
   "source": [
    "my_emps.pop(1)\n",
    "print(my_emps)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Organizing a list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Ashok', 'Joyal', 'Feyez', 'Vishal', 'Shawn']\n"
     ]
    }
   ],
   "source": [
    "emps = ['Ashok', 'Joyal', 'Feyez', 'Vishal', 'Shawn']\n",
    "print (emps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# If you wnat to print a list in Alphabatical order "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Ashok', 'Feyez', 'Joyal', 'Shawn', 'Vishal']\n"
     ]
    }
   ],
   "source": [
    "emps.sort()  # A- Z --> 1st letter in the word ---> , If the first the letter is same look for the 2nd letter.\n",
    "print (emps)  # Sort --> it wil making the changed permanent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# If we have a combination  Upper & Lower "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    " # If e need temparary sorting & we need go back original position"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['ash', 'joy', 'fey', 'shal', 'mush', 'henry']\n"
     ]
    }
   ],
   "source": [
    "emps2 = ['ash', 'joy', 'fey', 'shal', 'mush', 'henry']\n",
    "print(emps2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "here the sorted list\n",
      "['ash', 'fey', 'henry', 'joy', 'mush', 'shal']\n"
     ]
    }
   ],
   "source": [
    "print('here the sorted list')\n",
    "print(sorted(emps2)) # --> Which we will used for temp sorting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sort vs sorted!!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sort is permanent\n",
    "# sorted is temporary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
