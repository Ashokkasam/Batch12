{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Special methods of a class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "introduction to constructor *****\n",
    "# this will be used for initiazling the class & Attributes.\n",
    "initializer /Automatically invokes the attributes inside it:\n",
    "How to define a constructor:\n",
    "    def__init__# use double underscores\n",
    "        \n",
    "\n",
    "    def\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Dog:\n",
    "    \"\"\"A simple attempt to model a dog\"\"\"\n",
    "    \n",
    "    def __init__(self,name,age):\n",
    "        self.name= name\n",
    "        self.age= age\n",
    "        print(\"sucessfully executed and called out\")\n",
    "        \n",
    "    def sit(self):\n",
    "        \"\"\"simulate a dog sitting in esponse to a commmand\"\"\"\n",
    "        print(f\"{self.name} is now sitting\")\n",
    "        \n",
    "    def roll_over(self):\n",
    "        \"\"\"simulate a dog rollover in esponse to a commmand\"\"\"\n",
    "        print(f\"{self.name} rolled over\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sucessfully executed and called out\n"
     ]
    }
   ],
   "source": [
    "xobj = Dog('rex',4) # Automatically execution happened, Otherwise we used to assign to object.\n",
    "# we re directly assigning ... using constuctor."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rex is now sitting\n"
     ]
    }
   ],
   "source": [
    "xobj.sit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rex rolled over\n"
     ]
    }
   ],
   "source": [
    "xobj.roll_over()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# next topic \n",
    "parameters : name , age  ----\n",
    "    # what if we are not sure what kind of parameters it is going to accept?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Introduction to passing arbitrary num of aguments :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "req:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_pizza(*toppings): # * --> kwargs ---> If we dont know how many number of parameters are not known\n",
    "     \"\"\"print the list of toppongs that have been requested\"\"\"\n",
    "     print(toppings)\n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('olives', 'mushroom', 'tomoto')\n"
     ]
    }
   ],
   "source": [
    "make_pizza('olives','mushroom','tomoto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('onion', 'mushroom')\n"
     ]
    }
   ],
   "source": [
    "make_pizza('onion','mushroom')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Same example extended with for loop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_pizza(*toppings): # * --> kwargs ---> If we dont know how many number of parameters are not known\n",
    "     \"\"\"print the list of toppongs that have been requested\"\"\"\n",
    "     print(f\"\\n Making a pizza with the following toppings\")\n",
    "     for topping in toppings:\n",
    "            print(f\" - {topping}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Making a pizza with the following toppings\n",
      " - olives\n",
      " - mushroom\n",
      " - tomoto\n"
     ]
    }
   ],
   "source": [
    "make_pizza('olives','mushroom','tomoto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Making a pizza with the following toppings\n",
      " - olives\n",
      " - mushroom\n",
      " - tomoto\n",
      " - Meat\n",
      " - spinach\n",
      " - Chicken\n"
     ]
    }
   ],
   "source": [
    "make_pizza('olives','mushroom','tomoto','Meat', 'spinach', 'Chicken')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_pizza(size, *toppings): # * --> kwargs ---> If we dont know how many number of parameters are not known\n",
    "     \"\"\"print the list of toppongs that have been requested\"\"\"\n",
    "     print(f\"\\n Making a pizza with the following toppings\")\n",
    "     for topping in toppings:\n",
    "            print(f\" - {topping}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Making a pizza with the following toppings\n",
      " - olives\n",
      " - mushroom\n",
      " - tomoto\n",
      " - Meat\n",
      " - spinach\n",
      " - Chicken\n"
     ]
    }
   ],
   "source": [
    "make_pizza(16,'olives','mushroom','tomoto','Meat', 'spinach', 'Chicken')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_pizza(size, *toppings): # * --> kwargs ---> If we dont know how many number of parameters are not known\n",
    "     \"\"\"print the list of toppongs that have been requested\"\"\"\n",
    "     print(f\"ordered {size} inch  pizza with the - {toppings} as the toppings\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ordered 16 inch  pizza with the - ('olives', 'mushroom', 'tomoto', 'Meat', 'spinach', 'Chicken') as the toppings\n"
     ]
    }
   ],
   "source": [
    "make_pizza(16,'olives','mushroom','tomoto','Meat', 'spinach', 'Chicken')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
